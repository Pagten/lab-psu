# Based on the Contiki build system
ifndef FW_ROOT
  ${error FW_ROOT not defined! You must specify the root dir of the firmware}
endif

ifndef CUSTOM_TARGET
include $(FW_ROOT)/Makefile.target
endif

usage:
	@echo "usage:"
	@echo "\tmake <PROJECT_NAME>    Compile the project into an ELF file"
	@echo "\tmake sizeinfo          Show project memory usage"
	@echo "\tmake flashprof         Show detailed project flash usage"
	@echo "\tmake ramprof           Show detailed project ram usage"
	@echo "\tmake upload            Upload project code to MCU flash"
	@echo "\tmake eeupload          Upload project data to MCU EEPROM"
	@echo "\tmake fuseupload        Program MCU fuses"
	@echo "\tmake clean             Remove the build directory"
	@echo "\tmake distclean         Remove the build directory and the compiled ELF file"
	@echo "\tmake help|usage        Show this usage information"

help: usage
	@


CFLAGS += -std=gnu99 -Wall 
OBJECTDIR = build


SOURCEDIRS  += ${addprefix $(FW_ROOT)/, core drivers hal utils}
SOURCEFILES += mcp4922.c rotary.c scheduler.c spi_master.c
OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(patsubst %.c, %.o, $(SOURCEFILES))}

vpath %.c $(SOURCEDIRS)

# Create $(OBJECTDIR) if it has been removed by make clean
$(OBJECTDIR):
	@mkdir $@


### Verbosity control. Use  make V=1  to get verbose builds.
ifeq ($(V),1)
  TRACE_CC =
  TRACE_LD =
  Q=
else
  TRACE_CC    = @echo "  CC       " $<
  TRACE_LD    = @echo "  LD       " $@
  Q=@
endif

CFLAGS += -I. -I$(FW_ROOT)

### Check for a git repo and pass version if found
RELSTR=${shell git describe --tags 2>/dev/null}
ifneq ($(RELSTR),)
CFLAGS += -DFW_VERSION=\"$(RELSTR)\"
endif

### Automatic dependency generation
ifneq ($(MAKECMDGOALS),clean)
-include ${addprefix $(OBJECTDIR)/,$(SOURCEFILES:.c=.d)}
endif

### See http://make.paulandlesley.org/autodep.html#advanced

define FINALIZE_DEPENDENCY
cp $(@:.o=.d) $(@:.o=.$$$$); \
sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
    -e '/^$$/ d' -e 's/$$/ :/' < $(@:.o=.$$$$) >> $(@:.o=.d); \
rm -f $(@:.o=.$$$$)
endef

clean:
	-rm -f *~  \
	rm -rf $(CLEAN)
	-rm -rf $(OBJECTDIR)

distclean: clean
	-rm -rf $(PROJECT_NAME)

ifndef CUSTOM_RULE_C_TO_OBJECTDIR_O
$(OBJECTDIR)/%.o: %.c | $(OBJECTDIR)
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -MMD -c $< -o $@
	@$(FINALIZE_DEPENDENCY)
endif


ifndef LD
  LD = $(CC)
endif

ifndef CUSTOM_RULE_LINK
$(PROJECT_NAME): $(OBJECTDIR)/$(PROJECT_NAME).o $(OBJECTFILES)
	$(TRACE_LD)
	$(Q)$(LD) $(LDFLAGS) ${filter-out %.a,$^} \
	    ${filter %.a,$^} $(LIBS) -o $@
ifdef ELF_SIZE
	$(ELF_SIZE) $@
endif
endif

ifdef ELF_SIZE
sizeinfo: $(PROJECT_NAME)
	$(ELF_SIZE) $<
endif

ramprof: $(PROJECT_NAME)
	$(NM) -S -td --size-sort $< --reverse-sort | grep -i " [abdrw] " | cut -d' ' -f2,4

flashprof: $(PROJECT_NAME)
	$(NM) -S -td --size-sort $< --reverse-sort | grep -i " [t] " | cut -d' ' -f2,4

upload: $(PROJECT_NAME)
	$(AVRDUDE) $(AVRDUDE_OPTIONS) -U flash:w:$<:e

eeupload:
	$(AVRDUDE) $(AVRDUDE_OPTIONS) -U eeprom:w:$<:e

fuseupload:
	$(AVRDUDE) $(AVRDUDE_OPTIONS) -U lfuse:w:$<:e -U hfuse:w:$<:e -U efuse:w:$<:e

# Don't treat $(PROJECT_NAME) as an intermediate file because it is
# in fact the primary target.
.PRECIOUS: $(PROJECT_NAME)

